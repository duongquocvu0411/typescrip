import sgMail from '@sendgrid/mail';
import { SendGridSettings } from '../interfaces/SendGridSettings';
import * as dotenv from 'dotenv';
dotenv.config();

export class EmailService {
  private settings: SendGridSettings;

  constructor() {
    this.settings = {
      apiKey: process.env.SENDGRID_API_KEY!,
      senderEmail: process.env.SENDGRID_SENDER_EMAIL!,
      senderName: process.env.SENDGRID_SENDER_NAME!,
      adminEmail: process.env.SENDGRID_ADMIN_EMAIL!,
    };

    sgMail.setApiKey(this.settings.apiKey);
  }

  async sendParticipantNotificationAsync(name: string, message: string): Promise<void> {
    const msg = {
      to: this.settings.adminEmail,
      from: {
        email: this.settings.senderEmail,
        name: this.settings.senderName,
      },
      subject: `üéì Ng∆∞·ªùi tham gia m·ªõi: ${name}`,
      text: message || '(Kh√¥ng c√≥ n·ªôi dung)',
      html: `<p><strong>${name}</strong> ƒë√£ x√°c nh·∫≠n tham gia v√† ƒë·ªÉ l·∫°i l·ªùi ch√∫c:</p><p>${message || '(Kh√¥ng c√≥ n·ªôi dung)'}</p>`,
    };

    // üëâ Ghi log n·ªôi dung email ra console
    console.log('üìß Email chu·∫©n b·ªã g·ª≠i:');
    console.log(JSON.stringify(msg, null, 2));

    try {
      await sgMail.send(msg);
      console.log('‚úÖ Email participant notification ƒë√£ g·ª≠i th√†nh c√¥ng');
    } catch (error: any) {
      console.error('‚ùå L·ªói g·ª≠i email:', error);
      if (error.response) {
        console.error(error.response.body);
      }
    }
  }
}
